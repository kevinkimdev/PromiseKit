matrix:
  include:
    - os: linux
      dist: trusty
      sudo: required
      services: docker
      env: DOCKER_IMAGE=swift:3.1
    - os: osx
      language: objective-c
      osx_image: xcode8.3
      env: PLATFORM=Mac
    - os: osx
      language: objective-c
      osx_image: xcode8.3
      env: PLATFORM=iOS NAME='iPhone SE'
    - os: osx
      language: objective-c
      osx_image: xcode8.3
      env: PLATFORM=tvOS NAME='Apple TV 1080p'
    - os: osx
      language: objective-c
      osx_image: xcode8.3
      env: PLATFORM=watchOS
    - os: osx
      language: objective-c
      osx_image: xcode9
      env: PLATFORM=Mac
    - os: osx
      language: objective-c
      osx_image: xcode9
      env: PLATFORM=iOS NAME='iPhone SE'
    - os: osx
      language: objective-c
      osx_image: xcode9
      env: PLATFORM=tvOS NAME='Apple TV 1080p'
    - os: osx
      language: objective-c
      osx_image: xcode9
      env: PLATFORM=watchOS
before_install:
  - if [ -n "$NAME" ]; then
      export UUID=$(instruments -s | ruby -e "ARGF.each_line{ |ln| ln =~ /$NAME .* \[(.*)\]/; if \$1; puts(\$1); exit; end }");
    fi;
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      docker pull $DOCKER_IMAGE;
    fi
script:
  - set -o pipefail;
    case $PLATFORM in
    Mac)
      xcodebuild -scheme PromiseKit -enableCodeCoverage YES test | xcpretty;;
    iOS|tvOS)
      open -a "simulator" --args -CurrentDeviceUDID "$UUID";
      xcodebuild -scheme PromiseKit -destination "id=$UUID" -enableCodeCoverage YES test | xcpretty;;
    watchOS)
      xcodebuild -scheme PromiseKit -destination "name=Apple Watch - 38mm" | xcpretty;;
    *)
      docker-compose run PromiseKit;;
    esac
after_success:
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      bash <(curl -s https://codecov.io/bash);
    fi
